<?php

namespace AnthillTendersBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * TendersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class TendersRepository extends EntityRepository
{
    public function getAllTenders(){
        return $this->getEntityManager()
            ->createQuery(
            'SELECT p FROM AnthillTendersBundle:Tenders p ORDER BY p.id DESC'
            )->getArrayResult();
    }

    public function getTendersPaginatorAll($tenderbox){
        $dql   = "SELECT a FROM AnthillTendersBundle:Tenders a";
        $query = $tenderbox->getEntity()->createQuery($dql);
        return $tenderbox->getPaginator()->paginate(
            $query,
            $tenderbox->getRequest()->query->getInt('page', $tenderbox->getPage()),
            $tenderbox->getMAxCount()
        );
    }

    public function getTendersPaginator($tenderbox){
        $data = $tenderbox->getData();
        $qb = $tenderbox->getEntity()->createQueryBuilder()
                    ->select('a')
                    ->from('AnthillTendersBundle:Tenders', 'a');
        $this->setDateEnd($data, $qb);
        $this->setExistingCategory($data, $qb);
        $this->setExistingCompany($data, $qb);
        $this->setExistingName($data, $qb);
        $this->setExistingDateStart($data, $qb);
        $qb->orderBy("a.dateStart","desc");
        return $tenderbox->getPaginator()->paginate(
            $qb,
            $tenderbox->getRequest()->query->getInt('page', $tenderbox->getPage()),
            $tenderbox->getMAxCount()
        );
    }

    private function setDateEnd($data, &$qb){
        $end = new \DateTime;
        $str_end ="a.dateEnd >= '";
        if(isset($data['date_end'])){
            $str_end ="a.dateEnd <= '";
            $end = new \DateTime($data['date_end']);
            unset($data['date_end']);
        }
        $qb->where($str_end.$end->format("Y-m-d H:i:s")."'");
    }

    private function setExistingCategory($data, &$qb){
        if(isset($data['category'])){
            $orX = $qb->expr()->orX();
            foreach($data['category'] as $key => $value){
                $orX->add( 'a.category='.$value);
            }
            $qb->andWhere($orX);
        }
    }

    private function setExistingCompany($data, &$qb){
        if(isset($data['company'])){
            $qb->andWhere('a.company LIKE :company')
                ->setParameter('company','%'.trim($data['company']).'%')
                ->getQuery();
        }
    }

    private function setExistingName($data, &$qb){
        if(isset($data['name'])){
            $qb->andWhere('a.name LIKE :name')
                ->setParameter('name','%'.trim($data['name']).'%')
                ->getQuery();
        }
    }

    private function setExistingDateStart($data, &$qb){
        if(isset($data['date_start'])){
            $start = new \DateTime($data['date_start']);
            $qb->andWhere("a.dateStart >='".$start->format("Y-m-d H:i:s")."'");
        }
    }

}